# to find execution time of various algo
import time
array = [34,2,45,21,15]
print(array)

def insertion_sort(array):
    start_time = time.time()
    for i in range(1,len(array)):
        j=i-1
        nxt=array[i]
        
    while (j>=0) and (array[j]>nxt):
        array[j+1]=array[j]       
        j=j-1
    array[j+1]= nxt
    end_time = time.time()
    ex_time = end_time-start_time
    print("execution time for insertion sort is:",ex_time*10000)

def selection_sort(array):
    start_time = time.time()
    for i in range(len(array)):
        lowest = i
        for j in range(i+1,len(array)):
            if (array[lowest]>array[j]):
                lowest = j
                array[i],array[lowest]=array[lowest],array[i]
    end_time = time.time()
    ex_time = end_time-start_time
    print("execution time for selection sort is:", ex_time*10000)

def bubble_sort(array):
    start_time = time.time()
    n = len(array)
    for i in range(n):
        for j in range(i):
          if array[j]>array[j+1]:
            temp= array[j]
            array[j]= array[j+1]
            array[j+1]=temp
            end_time = time.time()
            ex_time = end_time-start_time
            print("execution time for bubble sort is:",ex_time*10000)

start_time = time.time()
def partition(l, r, array):
	pivot, ptr = array[r], l
	for i in range(l, r):
		if array[i] <= pivot:
			array[i], array[ptr] = array[ptr], array[i]
			ptr += 1
	array[ptr], array[r] = array[r], array[ptr]
	return ptr


def quicksort(l, r, array):
	if len(array) == 1: 
		return array
	if l < r:
		pi = partition(l, r, array)
		quicksort(l, pi-1, array)
		quicksort(pi+1, r, array) 
	return array

end_time = time.time()
ex_time = end_time - start_time

print(array)
insertion_sort(array)
selection_sort(array)
bubble_sort(array)
print("execution time for quick sort is:",ex_time*10000)